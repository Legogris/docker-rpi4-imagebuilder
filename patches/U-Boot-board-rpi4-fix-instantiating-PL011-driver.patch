From patchwork Fri Sep 27 05:39:37 2019
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Mark Dapoz <md@dapoz.ca>
X-Patchwork-Id: 1168419
X-Patchwork-Delegate: matthias.bgg@gmail.com
Return-Path: <u-boot-bounces@lists.denx.de>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@bilbo.ozlabs.org
Authentication-Results: ozlabs.org;
 spf=none (mailfrom) smtp.mailfrom=lists.denx.de
 (client-ip=81.169.180.215; helo=lists.denx.de;
 envelope-from=u-boot-bounces@lists.denx.de;
 receiver=<UNKNOWN>)
Authentication-Results: ozlabs.org;
 dmarc=none (p=none dis=none) header.from=dapoz.ca
Authentication-Results: ozlabs.org;
 dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=outbound.mailhop.org
 header.i=@outbound.mailhop.org header.b="rwRXPSKJ"; 
 dkim-atps=neutral
Received: from lists.denx.de (dione.denx.de [81.169.180.215])
 by ozlabs.org (Postfix) with ESMTP id 46fnzK1kKPz9sDB
 for <incoming@patchwork.ozlabs.org>;
 Fri, 27 Sep 2019 20:27:09 +1000 (AEST)
Received: by lists.denx.de (Postfix, from userid 105)
 id D2A96C21E16; Fri, 27 Sep 2019 10:26:51 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on lists.denx.de
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=T_DKIM_INVALID
 autolearn=unavailable autolearn_force=no version=3.4.0
Received: from lists.denx.de (localhost [IPv6:::1])
 by lists.denx.de (Postfix) with ESMTP id 07D09C21DA2;
 Fri, 27 Sep 2019 10:26:37 +0000 (UTC)
Received: by lists.denx.de (Postfix, from userid 105)
 id EF6E6C21C29; Fri, 27 Sep 2019 05:39:41 +0000 (UTC)
Received: from outbound3d.ore.mailhop.org (outbound3d.ore.mailhop.org
 [54.186.57.195])
 by lists.denx.de (Postfix) with ESMTPS id 26C99C21BE5
 for <u-boot@lists.denx.de>; Fri, 27 Sep 2019 05:39:40 +0000 (UTC)
ARC-Seal: i=1; a=rsa-sha256; t=1569562780; cv=none;
 d=outbound.mailhop.org; s=arc-outbound20181012;
 b=d2KbzTxxu1rWCT5ge72BM9FYe0SnYDAV+QPArv1/PWrDmsXsJijgORg+7yCYj7kCDF2hdSDw4BbeK
 2qLNH+GX7z+g5qag0QX/US73jniSsIu48JAWvJqPs7UmwjDi6kIiN67zcd4ziwtGlWRo0mt+/NJb2s
 Y7/ZssWywblDA/+sJkP+BORz3AYImKgIGOF1wtTarsyGB34HpfYkCxXTO4neeS4wRhgR45kQ55I0J9
 CU+GOnG5P9s7DDRoErOCUkFIWiMjDNL407RYxsEOxV1ksob4ZE56xbLo+7VDfEv7q0ZaUMWJLgi7eN
 FRi3c0n3BGbGi/5B16hFk67EdX/S1Rw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=outbound.mailhop.org; s=arc-outbound20181012;
 h=content-type:mime-version:message-id:subject:to:from:date:dkim-signature:from;
 bh=oEQLIs6R4TuZZiWahn/9WZSCyxrGUHvEkpzY+iC2XIY=;
 b=IW1dnZeluVt7fpC+CoGFdM2b1B2MtSg/7Qhs13HqoKO4ECipFg7SUJCR9fsHuvoWYALtZ7rMUpKLo
 jbpVmp2ShBrw6zYZumBmbW+aX0GMG7yevveB2SyZR90RJHqtEYn3wc5CcP8AurJljF5XngAdRWzdwt
 tm1U3PMZC/ZPNfRBE2kteBituFdWkGZThjIZln6/C/cCsTLlMIx5rpva9vds8/Y9GTVZJpTHQbdm9D
 0iR+1ewFkb1gmEYp+1VNyshh3dw4FL/tMTRJNnhlyXOm5SgqAs3SXT9ltLOKjyGSHVDeG+f+RUEArV
 GlxlPqsy+BYlYKZ39mAk7i8Jx96s+2g==
ARC-Authentication-Results: i=1; outbound3.ore.mailhop.org;
 spf=none smtp.mailfrom=dapoz.ca smtp.remote-ip=198.84.238.75;
 dmarc=none header.from=dapoz.ca;
 arc=none header.oldest-pass=0;
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=outbound.mailhop.org; s=dkim-high;
 h=content-type:mime-version:message-id:subject:to:from:date:from;
 bh=oEQLIs6R4TuZZiWahn/9WZSCyxrGUHvEkpzY+iC2XIY=;
 b=rwRXPSKJZcYc7JgEm7ABNR6eQk7W6p9+GYlZkFFVoBw+gt2QZMmB3FdZUhviYoJx3iIwwGswljO03
 lNnGFP+MLNc2hVxDaElYNBQu9y3Xsjy5mcPhmfBB5MmvKKgLiV0vuvj8SEdVLyI5cQlPXwNgo47UNT
 Z3JF/7kQWKxhZ1O08eeWwWpR+euMrt5OrwCyTxyqNQZ/R5FPhadqWtTlevYg1nvsP0Eg9c95utSX+a
 F22g59X+rPUGzaBqNXisyrS2lZwG66Vt8BC0CXTHWVtWCTTo8bMUtG8y0vbvBc5yTO4wIBijQdBd2n
 nDnZ0xwhie3/tGXKBdTp6ZT/55M+o0w==
X-MHO-RoutePath: bWRhcG96
X-MHO-User: 31a35578-e0e9-11e9-b67d-cdd75d6ce7a8
X-Report-Abuse-To: https://support.duocircle.com/support/solutions/articles/5000540958-duocircle-standard-smtp-abuse-information
X-Originating-IP: 198.84.238.75
X-Mail-Handler: DuoCircle Outbound SMTP
Received: from dapoz.ca (unknown [198.84.238.75])
 by outbound3.ore.mailhop.org (Halon) with ESMTPSA
 id 31a35578-e0e9-11e9-b67d-cdd75d6ce7a8;
 Fri, 27 Sep 2019 05:39:38 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by dapoz.ca (Postfix) with ESMTP id 4984B20C6554E5
 for <u-boot@lists.denx.de>; Fri, 27 Sep 2019 01:39:37 -0400 (EDT)
X-Virus-Scanned: amavisd-new at dapoz.ca
Received: from dapoz.ca ([127.0.0.1])
 by localhost (server.dapoz.ca [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id bfS7YEvm-bWE for <u-boot@lists.denx.de>;
 Fri, 27 Sep 2019 01:39:37 -0400 (EDT)
Received: from polar.dapoz.ca (polar.dapoz.ca [10.0.0.9])
 by dapoz.ca (Postfix) with ESMTPS id 3C78220C6554DF
 for <u-boot@lists.denx.de>; Fri, 27 Sep 2019 01:39:37 -0400 (EDT)
Date: Fri, 27 Sep 2019 01:39:37 -0400 (EDT)
From: Mark Dapoz <md@dapoz.ca>
To: u-boot@lists.denx.de
Message-ID: <alpine.OSX.2.21.1909270137030.94829@polar.dapoz.ca>
User-Agent: Alpine 2.21 (OSX 202 2017-01-01)
MIME-Version: 1.0
X-Mailman-Approved-At: Fri, 27 Sep 2019 10:26:34 +0000
Subject: [U-Boot] [PATCH] board: rpi4: fix instantiating PL011 driver
X-BeenThere: u-boot@lists.denx.de
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: U-Boot discussion <u-boot.lists.denx.de>
List-Unsubscribe: <https://lists.denx.de/options/u-boot>,
 <mailto:u-boot-request@lists.denx.de?subject=unsubscribe>
List-Archive: <http://lists.denx.de/pipermail/u-boot/>
List-Post: <mailto:u-boot@lists.denx.de>
List-Help: <mailto:u-boot-request@lists.denx.de?subject=help>
List-Subscribe: <https://lists.denx.de/listinfo/u-boot>,
 <mailto:u-boot-request@lists.denx.de?subject=subscribe>
Errors-To: u-boot-bounces@lists.denx.de
Sender: "U-Boot" <u-boot-bounces@lists.denx.de>

The bcm283x PL011 serial driver is hard coded to allow connections only
for UART0.  This prevents using any of the other UARTs as the U-boot
console.

The bcm283x serial driver is updated to allow connections to any of the
PL011 devices.  The initialization logic has been updated as follows:

     - a GPIO pinlist is extracted from the device tree for the device
     - each pin is compared against a function assignment table
     - if the pin is found in the table and the currently assigned GPIO
       function doesn't match, the device is unavailable
     - if the function matches the table entry or the pin is not listed
       the table, the device is available

The function assignment table contains entries for UART0 to ensure it
is multiplexed to GPIO pins 14 and 15.

This logic allows GPIO 14 and 15 to be multiplexed between the miniUART
and the PL011 UART by the board's loader.

An error in the default clock rate has also been fixed.  If the device
tree entry for the serial device doesn't specify a "clocks" property,
the default frequency of 1Hz was used.  The default has been changed
to 48MHz.

The configuration for the Raspberry Pi 4 has been updated to include
the PL011 driver.

To select an alternate UART as the U-boot console, the stdout-path can
be used as follows:

       chosen {
              stdout-path = "/soc/serial@7e201a00:115200";
              }

Signed-off-by: Mark Dapoz <Mark.Dapoz@windriver.com>
---

  configs/rpi_4_32b_defconfig           |   1 +
  configs/rpi_4_defconfig               |   1 +
  drivers/serial/serial_bcm283x_pl011.c | 150 ++++++++++++++++++++++++++++++----
  3 files changed, 136 insertions(+), 16 deletions(-)

diff --git a/configs/rpi_4_32b_defconfig b/configs/rpi_4_32b_defconfig
index dc69690..cd66b0b 100644
--- a/configs/rpi_4_32b_defconfig
+++ b/configs/rpi_4_32b_defconfig
@@ -31,3 +31,4 @@ CONFIG_SYS_WHITE_ON_BLACK=y
  CONFIG_CONSOLE_SCROLL_LINES=10
  CONFIG_PHYS_TO_BUS=y
  CONFIG_OF_LIBFDT_OVERLAY=y
+CONFIG_BCM283X_PL011_SERIAL=y
diff --git a/configs/rpi_4_defconfig b/configs/rpi_4_defconfig
index 2d63197..9f862c4 100644
--- a/configs/rpi_4_defconfig
+++ b/configs/rpi_4_defconfig
@@ -31,3 +31,4 @@ CONFIG_SYS_WHITE_ON_BLACK=y
  CONFIG_CONSOLE_SCROLL_LINES=10
  CONFIG_PHYS_TO_BUS=y
  CONFIG_OF_LIBFDT_OVERLAY=y
+CONFIG_BCM283X_PL011_SERIAL=y
diff --git a/drivers/serial/serial_bcm283x_pl011.c b/drivers/serial/serial_bcm283x_pl011.c
index 2527bb8..75b7ed5 100644
--- a/drivers/serial/serial_bcm283x_pl011.c
+++ b/drivers/serial/serial_bcm283x_pl011.c
@@ -11,24 +11,142 @@
  #include <serial.h>
  #include "serial_pl01x_internal.h"

+#define	UART0_GPIO_RX	15
+#define	UART0_GPIO_TX	14
+
+/* required pin vs function list for the PL011 UARTs */
+
+static const struct pin_func_map {
+	int pin;	/* GPIO pin number */
+	int function;	/* GPIO function */
+} uart_pin_functions[] = {
+	{ .pin = UART0_GPIO_TX, .function = BCM2835_GPIO_ALT0 }, /* TXD0 */
+	{ .pin = UART0_GPIO_RX, .function = BCM2835_GPIO_ALT0 }, /* RXD0 */
+};
+
+static const int num_uart_pin_functions =
+		 sizeof(uart_pin_functions) / sizeof(struct pin_func_map);
+
+/*
+ * Check if the pin/function assignment is valid
+ *
+ * The pin/function assignment is validated against the PL011 function
+ * table to determine if the current configuration is valid for a
+ * PL011 UART.
+ *
+ * @return true if the assignment is valid, false if not
+ */
+static bool bcm383x_check_gpio_mapping(int pin, int function)
+{
+	int i;
+
+	/* iterate through the list checking the pin assignment */
+
+	for (i = 0; i < num_uart_pin_functions; i++) {
+		if (uart_pin_functions[i].pin == pin) {
+			/* pin assignment matches, check for a valid function */
+
+			if (uart_pin_functions[i].function == function)
+				return true;
+			else
+				return false;
+		}
+	}
+
+	/* no pin match found, the mapping is unrestricted */
+
+	return true;
+}
+
  /*
- * Check if this serial device is muxed
+ * Check if this serial device is available and muxed correctly
   *
- * The serial device will only work properly if it has been muxed to the serial
- * pins by firmware. Check whether that happened here.
+ * The uart0 serial device will only work properly if it has been muxed to
+ * the serial pins by firmware. Check if the device is uart0 and if it is
+ * is the muxing correct.
   *
- * @return true if serial device is muxed, false if not
+ * @return true if serial device is usable, false if not
   */
-static bool bcm283x_is_serial_muxed(void)
+static bool bcm383x_check_serial_availability(struct udevice *dev)
  {
-	int serial_gpio = 15;
-	struct udevice *dev;
+	const void *fdt = gd->fdt_blob;
+	const fdt32_t *cell;
+	struct udevice *pin_dev;
+	u32 phandle;
+	int pin_func;
+	int pin;
+	int offset = 0;
+	int size;
+	int len;
+	int i;
+
+	/* get the offset for this device's pinctrl-0 phandle */
+
+	cell = fdt_getprop(fdt, dev_of_offset(dev), "pinctrl-0", &size);
+	if (!cell)
+		return false;
+
+	/* find the offset of the device's pinctrl-0 node */
+
+	while (size) {
+		phandle = fdt32_to_cpu(*cell++);
+		size -= sizeof(*cell);
+
+		offset = fdt_node_offset_by_phandle(fdt, phandle);
+		if (offset < 0) {
+			/* bad offset, not found */

-	if (uclass_first_device(UCLASS_PINCTRL, &dev) || !dev)
+			return false;
+		}
+	}
+
+	/* check to make sure we found the pinctrl-0 node */
+
+	if (offset == 0)
  		return false;

-	if (pinctrl_get_gpio_mux(dev, 0, serial_gpio) != BCM2835_GPIO_ALT0)
+	/* get the bcrm,pins property */
+
+	cell = fdt_getprop(fdt, offset, "brcm,pins", &len);
+
+	if (!cell) {
+		/* no pin property, signal as unavailable */
+
  		return false;
+	}
+
+	/* find the pinctrl device */
+
+	if (uclass_first_device(UCLASS_PINCTRL, &pin_dev) || !pin_dev)
+		return false;
+
+	/* if the pin list is empty, assume this is uart0 */
+
+	if (len < sizeof(int)) {
+		/* check that the Tx GPIO pin is muxed for the PL011 */
+
+		pin_func = pinctrl_get_gpio_mux(pin_dev, 0, UART0_GPIO_TX);
+		return bcm383x_check_gpio_mapping(UART0_GPIO_TX, pin_func);
+	}
+
+	/* check the pin list for a valid PL011 mapping */
+
+	for (i = 0; i < len / sizeof(int); i++) {
+		/* get the function assigned to this pin */
+
+		pin = fdt32_to_cpu(cell[i]);
+		pin_func = pinctrl_get_gpio_mux(pin_dev, 0, pin);
+
+		/* check the pin/function assignment */
+
+		if (bcm383x_check_gpio_mapping(pin, pin_func) == false) {
+			/* any failed pin checks makes the device unavailable */
+
+			return false;
+		}
+	}
+
+	/* all checks pass, indicate device is available */

  	return true;
  }
@@ -38,19 +156,19 @@ static int bcm283x_pl011_serial_ofdata_to_platdata(struct udevice *dev)
  	struct pl01x_serial_platdata *plat = dev_get_platdata(dev);
  	int ret;

-	/* Don't spawn the device if it's not muxed */
-	if (!bcm283x_is_serial_muxed())
+	/* don't spawn the device if it's not usable */
+
+	if (bcm383x_check_serial_availability(dev) == false)
  		return -ENODEV;

  	ret = pl01x_serial_ofdata_to_platdata(dev);
  	if (ret)
  		return ret;

-	/*
-	 * TODO: Reinitialization doesn't always work for now, just skip
-	 *       init always - we know we're already initialized
-	 */
-	plat->skip_init = true;
+	/* default clock to 48MHz if the device tree didn't specificy a freq */
+
+	if (plat->clock == 1)
+		plat->clock = 48000000;

  	return 0;
  }
